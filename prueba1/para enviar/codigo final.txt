-- PRUEBA 1
-- Declaracion de variables bind para ingresar fechas de calculo y porcentajes usados para calculos de pertenencia a grupos
VAR b_bono_cat_A number;
EXEC :b_bono_cat_A := 15.4;

VAR b_bono_cat_B number;
EXEC :b_bono_cat_B := 12.3;

VAR b_bono_cat_C number;
EXEC :b_bono_cat_C := 11.5;

VAR b_bono_sin_cat number;
EXEC :b_bono_sin_cat := 3;

VAR b_carga_familiar number;
EXEC :b_carga_familiar := 6300; 

VAR b_mes_fecha_proceso_calcular number;
EXEC :b_mes_fecha_proceso_calcular := 5;

VAR b_anno_fecha_proceso_calcular number;
EXEC :b_anno_fecha_proceso_calcular := 2021;

VAR b_fecha_proceso number;

VAR b_porcentaje number;

VAR b_bonif_antig_tramo_1 number ;
EXEC :b_bonif_antig_tramo_1 := 0.04

VAR b_bonif_antig_tramo_2 number;
EXEC :b_bonif_antig_tramo_2 := 0.06

VAR b_bonif_antig_tramo_3 number;
EXEC :b_bonif_antig_tramo_3 := 0.07

VAR b_bonif_antig_tramo_4 number; 
EXEC :b_bonif_antig_tramo_4 :=0.1

VAR b_bonif_antig_tramo_5 number;
EXEC :b_bonif_antig_tramo_5 := 0.15

VAR b_bonif_antig_tramo_6 number;
EXEC :b_bonif_antig_tramo_6 := 0.18

VAR b_bono_grupos_A number;
EXEC :b_bono_grupos_A := 0.35;

VAR b_bono_grupos_B number;
EXEC :b_bono_grupos_B := 0.30;

VAR b_bono_grupos_C number;
EXEC :b_bono_grupos_C := 0.25;

VAR b_bono_grupos_D number;
EXEC :b_bono_grupos_D := 0.20;

VAR b_bono_sin_grupo number;
EXEC :b_bono_sin_grupo := 0;

-- truncado de tablas para poder ejecutar el bloque pl/sql reiteradas veces
truncate table haber_mes_vendedor;
truncate table descuento_mes_vendedor;

-- declaracion de variables escalares para luego realizar calculos de datos a ingresar en tablas
DECLARE 
-- datos de tabla vendedor hasta el sueldo solo son extraidos de tabla
v_id_vendedor number; v_numrut_vendedor number; v_mes_proceso number;
v_anno_proceso number; v_sueldo_base number;

-- variables para realizar ejercicio a.(ASIG_ANTIGUEDAD)
v_asig_antiguedad number; v_annos_antiguedad number;

-- variables para realizar ejercicio b.(ASIG_CARGAS)
v_n_cargas_familiares number;
v_asig_cargas number; v_id_carga number;

-- variable para ejercicio c. (COMISIONES)
v_comisiones number;
-- variables para ejercicio d. (BONO_CATEG)
v_bono_categ number;
v_total_ventas_mes number;
v_porcentaje number;
v_id_cat char(1);

-- variables para ejercicio e (BONO_GRUPOS).
v_id_grupo_vr varchar2(1);
v_bono_grupos_porc number;
v_bono_grupos number;

-- variables para ejercicio f (DESCUENTOS).
v_descuentos number;
v_ant_mes number;
-- variables para ejercicio g (TOTAL_HABERES).
v_total_haberes number;

-- variables para ejercicio h (DESCUENTOS POR SALUD E ISAPRE).
v_valor_afp number;
v_valor_salud number;
v_porc_desc_afp number;
v_porc_desc_salud number;

-- subconsulta dentro de FOR para recorrer varias filas
BEGIN
for i in (
select 
vr.id_vendedor id,
vr.rut_vendedor,
EXTRACT(MONTH FROM vt.fecha_venta) MES,
EXTRACT(YEAR FROM vt.fecha_venta) ANNO,
vr.sueldo,
ROUND(MONTHS_BETWEEN(SYSDATE,vr.FECCONTRATO)/12) antiguedad,
COUNT( DISTINCT CARGA.NUMRUT_CARGA) cuenta,
com.monto_comision comision,
com.mes mes_com,
com.total_ventas total_v_mes,
cat.porcentaje porc_venta,
vr.id_categoria id_categoria,
vr.id_grupo id_grupo,

ant.monto monto_anticipo,
ant.mes ant_mes,

afp.porc_descto_afp desc_afp,
sal.porc_descto_salud desc_salud
 

from venta vt 
RIGHT join vendedor vr on (vt.id_vendedor = vr.id_vendedor)
left join carga_familiar carga 
on (carga.id_vendedor = vr.id_vendedor)
join comision_venta com on (com.id_vendedor = vr.id_vendedor)
left JOIN categoria cat on (vr.id_categoria = cat.id_categoria)
JOIN anticipo ant ON (vr.id_vendedor = ant.id_vendedor)
JOIN afp afp on (afp.id_afp = vr.id_afp)
JOIN SALUD sal on (sal.id_salud = vr.id_salud)
WHERE EXTRACT(MONTH FROM vt.fecha_venta) = :b_mes_fecha_proceso_calcular
AND EXTRACT(YEAR FROM vt.fecha_venta) = :b_anno_fecha_proceso_calcular
AND com.mes = 5
AND ant.mes = com.mes -1

GROUP BY 
vr.id_vendedor,
vr.rut_vendedor,
EXTRACT(MONTH FROM vt.fecha_venta),
EXTRACT(YEAR FROM vt.fecha_venta),
vr.sueldo,
ROUND(MONTHS_BETWEEN(SYSDATE,vr.FECCONTRATO)/12),
com.monto_comision,
com.mes,
com.total_ventas,
cat.porcentaje,
vr.id_categoria,
vr.id_grupo,
ant.monto,
ant.mes,
afp.porc_descto_afp,
sal.porc_descto_salud
)

----------------------------------------------------------------------
-- LOOP para recorrer for en ciclos (recorrer filas)
LOOP
-- variables con asignacion de datos a partir del FOR
v_numrut_vendedor := i.rut_vendedor;
v_mes_proceso := i.mes;
v_anno_proceso := i.anno;
v_sueldo_base := i.sueldo;
v_annos_antiguedad := i.antiguedad;







v_porc_desc_afp := i.desc_afp;
v_porc_desc_salud := i.desc_salud;

----------------------------------------------------------------------

-- a. calculo para asignacion de bono por antiguedad
v_asig_antiguedad :=  
    CASE    
    WHEN  v_annos_antiguedad BETWEEN 1 AND 9 THEN  ROUND(v_sueldo_base * :b_bonif_antig_tramo_1)
    WHEN  v_annos_antiguedad BETWEEN 10 AND 12 THEN ROUND(v_sueldo_base * :b_bonif_antig_tramo_2)
    WHEN  v_annos_antiguedad BETWEEN 13 AND 16 THEN ROUND(v_sueldo_base * :b_bonif_antig_tramo_3)
    WHEN  v_annos_antiguedad BETWEEN 17 AND 30 THEN ROUND(v_sueldo_base * :b_bonif_antig_tramo_4)
    WHEN  v_annos_antiguedad BETWEEN 31 AND 40 THEN ROUND(v_sueldo_base * :b_bonif_antig_tramo_5)
    WHEN  v_annos_antiguedad BETWEEN 41 AND 50 THEN ROUND(v_sueldo_base * :b_bonif_antig_tramo_6)
    ELSE 0
    END;
    COMMIT;

-- b. Valor de asignación por carga familiar
v_n_cargas_familiares := i.cuenta;
v_id_vendedor  := i.id;

--dbms_output.put_line('el vendedor '||v_id_vendedor||' tiene '||v_n_cargas_familiares|| ' CARGAS Familiares ');    
    -- se multiplica la cantidad de cargas por el valor de bono por carga
    v_asig_cargas := ROUND(v_n_cargas_familiares * :b_carga_familiar);
      
      
-- c. comisión añadida
v_comisiones := i.comision;
--dbms_output.put_line('la comision del empleado ' || v_id_vendedor||' es de '|| v_comisiones);      

-- d. Calculando el bono por categoria de vendedor
 v_total_ventas_mes := i.total_v_mes;
 v_id_cat := i.id_categoria;
  
    IF    v_id_cat = 'A'  THEN v_bono_categ := ROUND(v_total_ventas_mes * :b_bono_cat_A /100);
    ELSIF v_id_cat = 'B'  THEN v_bono_categ := ROUND(v_total_ventas_mes * :b_bono_cat_B /100);
    ELSIF v_id_cat = 'C'  THEN v_bono_categ := ROUND(v_total_ventas_mes * :b_bono_cat_C /100);
    ELSE v_bono_categ := ROUND(:b_bono_sin_cat/100);
    END IF;
  
-- dbms_output.put_line('EL VENDEDOR '||v_id_vendedor ||' CATEGORIA '||v_id_cat||' '||'tiene un BONO DE '||v_bono_categ);      

-- e. calculo de asignación especial por grupo al que pertenecen los vendedores (id_grupo) 
   v_id_grupo_vr:= i.id_grupo;  

    IF v_id_grupo_vr like 'A%' AND v_total_ventas_mes > 5500000 THEN v_bono_grupos := ROUND(v_sueldo_base * :b_bono_grupos_A);
    ELSIF v_id_grupo_vr like 'B%' AND v_total_ventas_mes > 5500000 THEN v_bono_grupos :=  ROUND(v_sueldo_base * :b_bono_grupos_B);
    ELSIF v_id_grupo_vr like 'C%' AND v_total_ventas_mes > 5500000 THEN v_bono_grupos :=  ROUND(v_sueldo_base * :b_bono_grupos_C);
    ELSIF v_id_grupo_vr like 'D%' AND v_total_ventas_mes > 5500000 THEN v_bono_grupos :=  ROUND(v_sueldo_base * :b_bono_grupos_D);
    ELSIF v_id_grupo_vr IS NULL THEN v_bono_grupos := :b_bono_sin_grupo;
    ELSE v_bono_grupos := 0;
    END IF;
    
-- dbms_output.put_line(v_bono_grupos); 

  -- f. descuentos vendedor (columna descuentos habermesvendedor)  
  
  v_descuentos := i.monto_anticipo;
  v_ant_mes := i.ant_mes;
 dbms_output.put_line('se descuentan '||v_descuentos||' del vendedor ' ||v_id_vendedor ||' en el mes '||v_ant_mes); 
 
 -- g.Se calculan todos los bonos y descuentos para la columna (TOTAL HABERES) 
 v_total_haberes := v_sueldo_base + v_asig_antiguedad + v_asig_cargas + v_comisiones+ v_bono_categ + v_bono_grupos - v_descuentos; 

-- h. Descuentos por AFP Y SALUD

v_valor_afp := ROUND(v_total_haberes * (v_porc_desc_afp/100));
v_valor_salud := ROUND( v_total_haberes * (v_porc_desc_salud/100));

-- Insersión de datos en tablas descuento_mes_vendedor y haber_mes_vendedor

INSERT INTO descuento_mes_vendedor VALUES (
v_id_vendedor,
v_numrut_vendedor,
v_mes_proceso,
v_anno_proceso,
v_valor_salud,
v_valor_afp);


INSERT INTO haber_mes_vendedor VALUES (
v_id_vendedor,
v_numrut_vendedor,
v_mes_proceso,
v_anno_proceso,
v_sueldo_base,
v_asig_antiguedad,
v_asig_cargas,
v_comisiones,
v_bono_categ,
v_bono_grupos,
v_descuentos,
v_total_haberes);

END LOOP;
end;
/